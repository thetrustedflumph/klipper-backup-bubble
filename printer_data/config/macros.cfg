[gcode_macro BACKUP_CONFIG_TO_GITHUB]
gcode:
    RUN_SHELL_COMMAND CMD=BACKUP_CONFIG_TO_GITHUB_SHELL
    RESPOND MSG='Github backup complete.'


[gcode_shell_command BACKUP_CONFIG_TO_GITHUB_SHELL]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True


[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos  : True  ; use custom park coordinates for x,y [True/False] 
variable_custom_park_x   : 0 ; custom x position; value must be within your defined min and max of X
variable_custom_park_y   : -165  ; custom y position; value must be within your defined min and max of Y
gcode:


[gcode_macro REMOVE_FILAMENT]
gcode:
    G91  # use relative coordinates
    G92 E0  # zero the extrude length
    G1 E15 F300  # extrude 15mm of filament
    G1 E-100 F1000  # retract 100mm of filament
    RESPOND MSG='Filament unload completed.'


[gcode_macro LOAD_FILAMENT]
gcode:
    G91  # use relative coordinates
    G92 E0  # zero the extrude length
    G1 E120 F300  # extrude 120mm of filament
    G1 E-2 F1000  # retract 2mm of filament
    RESPOND MSG='Filament loading completed.'


[gcode_macro MOVE_TO_FRONT]
gcode:
    G90
    G1 X0 Y-165 Z400 F3000
    RESPOND MSG='Effector moved to front of machine.'


[gcode_macro MOVE_TO_PAUSE_POSITION]
gcode:
    G91
    G1 Z5
    G90
    G1 X0 Y-165 F3000
    RESPOND MSG='Effector moved to front of machine.'


[gcode_macro HOME]
gcode:
    G28

[gcode_macro SET_THERMAL_OFFSET]
gcode:
  {% set ext_temp = params.SLICER_TEMP_EXTRUDER | float %}
  {% set bed_temp = params.SLICER_TEMP_BED | float %}

  # Calculate extruder offset:
  #   - For temperatures below 160°C, use 0.
  #   - For temperatures above 280°C, use 0.039.
  #   - Otherwise, interpolate linearly between 0 and 0.039 over a 120°C span.
  {% if ext_temp < 160 %}
    {% set ext_offset = 0 %}
  {% elif ext_temp > 280 %}
    {% set ext_offset = 0.039 %}
  {% else %}
    {% set ext_offset = ((ext_temp - 160) / 120) * 0.039 %}
  {% endif %}

  # Calculate bed offset:
  #   - For temperatures below 40°C, use 0.
  #   - For temperatures above 100°C, use 0.007.
  #   - Otherwise, interpolate linearly between 0 and 0.007 over a 60°C span.
  {% if bed_temp < 40 %}
    {% set bed_offset = 0 %}
  {% elif bed_temp > 100 %}
    {% set bed_offset = 0.007 %}
  {% else %}
    {% set bed_offset = ((bed_temp - 40) / 60) * 0.007 %}
  {% endif %}

  # Sum the offsets
  {% set total_offset = ext_offset + bed_offset %}
  {% set rounded_offset = "%.4f" % total_offset %}
  RESPOND MSG='Thermal Offset: {rounded_offset} mm'
  SET_GCODE_OFFSET Z_ADJUST={total_offset}

[gcode_macro PRINT_START]
gcode:
    {% set SLICER_TEMP_BED = params.SLICER_TEMP_BED|default(60)|int %}
    {% set SLICER_TEMP_EXTRUDER = params.SLICER_TEMP_EXTRUDER|default(210)|int %}
    {% set SLICER_Z_OFFSET = params.SLICER_Z_OFFSET|default(0.000)|float %}
    {% set SLICER_NOZZLE_DIAMETER = params.SLICER_NOZZLE_DIAMETER|default(0.40)|float %}
    M140 S{SLICER_TEMP_BED} #start bed heating
    G90  #set absolute coordinates
    G28  #initial home
    BED_MESH_PROFILE LOAD=default #load bed mesh profile
    RESPOND MSG='Bed mesh profile set.'
    G91  #set relative coordinates
    G0 Z-5 F1200  # move 5mm down
    SET_GCODE_OFFSET Z_ADJUST={SLICER_Z_OFFSET} # apply z-offset
    SET_THERMAL_OFFSET SLICER_TEMP_EXTRUDER={SLICER_TEMP_EXTRUDER} SLICER_TEMP_BED={SLICER_TEMP_BED}
    RESPOND MSG='Z-offset set.'
    G90  #set absolute coordinates
    G1 X-37 Y-165 Z1 F3000  # move effector to front of bed
    M104 S160 # set nozzle temperature to 160°C
    M190 S{SLICER_TEMP_BED}  # wait for bed to reach temperature
    M104 S{SLICER_TEMP_EXTRUDER}  # set nozzle temperature
    M109 S{SLICER_TEMP_EXTRUDER}  # wait for nozzle to reach temperature
    G92 E0  # zero the extrude length
    G1 X-35 Y-165 Z{SLICER_NOZZLE_DIAMETER * 1.125} F1200  # quickly move to purge line start position
    G1 X35 Y-165 Z{SLICER_NOZZLE_DIAMETER * 1.125} E{SLICER_NOZZLE_DIAMETER * 125} F400  # draw purge line
    G1 Z5 F1200  # move 5mm up
    G92 E0  # zero the extrude length
    RESPOND MSG='Printing started.'


[gcode_macro PRINT_END]
gcode:
    G91  #set relative coordinates
    G1 E-1 F2100  # retract 1mm of filament
    M140 S0  # turn off bed
    M104 S0  # turn off extruder
    M106 S0  # turn off fan
    G1 Y-1 Z1 E-2 F300  # move nozzle away from print while retracting
    G1 Z10 F3000  # raise nozzle by 10mm
    SET_GCODE_OFFSET Z=0  # clear z-offset
    RESPOND MSG='Z-offset cleared.'
    BED_MESH_CLEAR  # clear bed mesh
    RESPOND MSG='Bed mesh cleared.'
    G90  # set absolute coordinates
    G28  # home
    RESPOND MSG='Printing completed.'


[gcode_macro M900] #Pressure Advance
gcode:
    {% set K = params.K|default(0)|float %}
    SET_PRESSURE_ADVANCE ADVANCE={K}
    RESPOND MSG='Pressure advance k-value set.'


[gcode_macro M600] #Change Filament
gcode:
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    REMOVE_FILAMENT
    RESTORE_GCODE_STATE NAME=M600_state


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    MOVE_TO_PAUSE_POSITION
    RESPOND MSG='Printing paused...'
    
[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    G91
    G1 E-1 F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME
    RESPOND MSG='Printing resumed.'
    
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    BASE_CANCEL_PRINT
    SET_GCODE_OFFSET Z=0  # clear z-offset
    RESPOND MSG='Z-offset cleared.'
    BED_MESH_CLEAR  # clear bed mesh
    RESPOND MSG='Bed mesh cleared.'
    RESPOND MSG='Printing canceled!'

######################################################################
# Override M117 command with rawparams
######################################################################

# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`

[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}

[gcode_macro M486]
gcode:
  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro M808] # 'Marlin' style M808 compatibility macro for SDCard looping
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}